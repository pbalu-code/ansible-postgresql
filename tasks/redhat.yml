#postgres/tasks/redhat.yml
---
#- name: Ensure set LANGS
#  shell: "localectl set-locale LANG='{{ locale }}' LC_CTYPE='{{ locale }}' \
#  LC_NUMERIC='{{ locale }}' LC_TIME='{{ locale }}' LC_COLLATE='{{ locale }}' \
#  LC_MONETARY='{{ locale }}' LC_MESSAGES='{{ locale }}' LC_PAPER='{{ locale }}' \
# LC_NAME='{{ locale }}' LC_ADDRESS='{{ locale }}' LC_TELEPHONE='{{ locale }}' \
#  LC_MEASUREMENT='{{ locale }}' LC_IDENTIFICATION='{{ locale }}'"

#- name: Reinstall glibc (Hun support)
#  command: "yum reinstall -y glibc-common"

#- name: Install lang tools
#  package:
#    name:
#      - langpacks-en
#      - langpacks-hu
#      - glibc-all-langpacks
- name: Install postGIS
  block:
  - name: Make sure epel repo is installed
    ansible.builtin.package:
      name: "epel-release"
      state: present

  - name: Install Code Ready (RedHat)
    ansible.builtin.shell:
      cmd: "subscription-manager repos --enable \
      codeready-builder-for-rhel-{{ ansible_distribution_major_version }}-x86_64-rpms"
    when: ansible_distribution == "RedHat"

  - name: Enable Powertools (for PostGIS)
    ansible.builtin.ini_file:
      path: /etc/yum.repos.d/CentOS-Linux-PowerTools.repo
      section: powertools
      option: enabled
      value: "1"
      mode: 0644
    when:
      - ansible_distribution_major_version is version('8', '>=')
      - ansible_distribution != 'RedHat'
      - ansible_os_family == "RedHat"
    notify: Dnf_cache

  when:
    - postgresql_install_postgis
#    - ansible_distribution != "RedHat"

- name: Disable original postgresql dnf module
  ansible.builtin.blockinfile:
    path: /etc/dnf/modules.d/postgresql.module
    create: yes
    block: |
      [postgresql]
      name=postgresql
      profiles=
      state=disabled
      stream=
    mode: 0644
  when:
    - ansible_facts['distribution_major_version'] == "8"
  notify: Dnf_cache

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Import a key from a url
  ansible.builtin.rpm_key:
    state: present
    key: https://download.postgresql.org/pub/repos/yum/keys/PGDG-RPM-GPG-KEY-RHEL

- name: Install repo for PostgreSQL
  ansible.builtin.package:
#    name: "https://download.postgresql.org/pub/repos/yum/{{ postgresql_version }}\
#  /redhat/rhel-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    name: "https://download.postgresql.org/pub/repos/yum/reporpms/\
    EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    state: present
  when:
    - outgoing_proxy is not defined

- name: Set PostgreSQL dotless version fact
  ansible.builtin.set_fact:
    __postgresql_version_dotless: "{{ postgresql_version | replace('.', '') | replace('-', '') }}"
    __postgresql_command_sep: "{{ postgresql_version is version('10', '>=') | ternary('-', '') }}"

- name: "Install PostgreSQL version {{ postgresql_version }}"
  ansible.builtin.package:
    name:
      - "postgresql{{ __postgresql_version_dotless }}-server"
      - "postgresql{{ __postgresql_version_dotless }}-contrib"
      - "postgresql{{ __postgresql_version_dotless }}-libs"
      - "postgresql{{ __postgresql_version_dotless }}"
    state: present

- name: Install pg_repack
  ansible.builtin.package:
    name: "pg_repack{{ __postgresql_version_dotless }}"
    state: present
  when: postgresql_version is version('14', '<') and ansible_distribution_version is version('8.8', '<')

# posgres_db modul - Failed to import the required Python library (psycopg2)
- name: Install python module for Postgres Redhat 9+
  ansible.builtin.package:
    name:
      - "{% if ansible_python_version is version('3', '<') %}python2-psycopg2{% else \
          %}python3-psycopg2{% endif %}"
    state: present
  when: ansible_distribution_major_version is version('8', '>=')

# posgres_db modul - Failed to import the required Python library (psycopg2)
- name: Install python module for Postgres Redhat 8+
  ansible.builtin.package:
    name:
      - "{% if ansible_python_version is version('3', '<') %}python2-psycopg2{% else \
          %}python3-psycopg2{% endif %}"
    state: present
  when: ansible_distribution_major_version is version('8', '>=')

- name: Install python module for Postgres Redhat 7
  ansible.builtin.package:
    name:
      - "{% if ansible_python_version is version('3', '<') %}python-psycopg2{% else \
          %}python3-psycopg2{% endif %}"
    state: present
  when: ansible_distribution_major_version is version('8', '<')

- name: Install Postgresql libs for python
  ansible.builtin.package:
    name:
      - "{{ ansible_distribution_major_version is version('8', '>=') | \
      ternary('libpq-devel', 'libpq5-devel') }}"
  when: postgresql_version is version('10', '<')

- name: Install extra postgresql packages
  ansible.builtin.package:
    name: "{{ postgresql_extra_packages }}"
    state: present
  when: postgresql_extra_packages is defined

- name: Install PostGIS
  ansible.builtin.package:
    name: "{{ postgresql_posgis_to_install }}"
    state: present
  when:
    - postgresql_install_postgis

#- name: "Enable init.d script for {{ postgresql_version }}"
#  shell: "chkconfig --level 2345 postgresql-{{ postgresql_version }} on"
#  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == "7"
- name: "Enable init.d script for {{ postgresql_version }}"
  ansible.builtin.sysvinit:
    name: "postgresql-{{ postgresql_version }}"
    #state: started
    enabled: yes
    runlevels:
      - 2
      - 3
      - 4
      - 5
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "6"

- name: Check DB init state
  ansible.builtin.stat:
    path: "{{ postgresql_pgdata }}/pg_tblspc"
  register: dbinit

- name: Create database
  ansible.builtin.command: "{{ postgresql_bin_dir }}/postgresql\
    {{ __postgresql_command_sep }}{{ __postgresql_version_dotless }}-setup initdb
    creates={{ postgresql_pgdata }}/postgresql.conf"
  become: true
  #become_user: "{{ postgresql_user_name }}"
  when: not dbinit.stat.exists

- name: Update environment variables in UNIX account postgres
  ansible.builtin.blockinfile:
    create: yes
    dest: "{{ postgresql_home }}/.pgsql_profile"
    block: |
      export PGHOST=/tmp PAGER=less PGHOST=/tmp PAGER=less PGDATA={{ postgresql_pgdata_default }}
    owner: "{{ postgresql_user_name }}"
    group: "{{ postgresql_user_name }}"
    marker: "#{mark} ANSIBLE MANAGED BLOCK General"
    mode: 0640
  become: true

- name: Start postgresql service
  ansible.builtin.service:
    name: "{{ postgresql_service_name }}"
    state: started
    enabled: true
  become: true
